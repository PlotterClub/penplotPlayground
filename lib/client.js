/*
  Scaffolds a penplot canvas and render loop and handles
  the directory listing for multiple entries.
 */

import 'babel-polyfill'; 
import penplot from 'penplot';
import insertCSS from 'insert-css';

function run (name, result) {
  if (!result) throw new Error(`Module ${name} does not export anything!`);
  if (result.__esModule) {
    // assume ES2015
    if (!result.default) {
      throw new Error(`Malformed penplot function in ${name}\nES2015 modules must export a default function.`);
    }
    const opts = Object.assign({}, result);
    delete opts.default;
    delete opts.__esModule;
    penplot(result.default, opts);
  } else if (typeof result === 'function') {
    // assume CommonJS
    penplot(result, Object.assign({}, result));
  } else {
    throw new Error(`Malformed penplot function in ${name}\nModule must be ` +
      'in ES2015 or CommonJS style and should return a function.');
  }
}

function list (names) {
  insertCSS(`
    body {
      margin: 0;
    }
    div {
      margin: 20px;
      columns: 3;
    }
    a, a:hover, a:visited, a:active {
      display: block;
      font: 14px 'Helvetica', sans-serif;
      text-decoration: none;
      color: #89bbed;
      padding-bottom: 5px;
    }
    a:hover {
      color: #518cc6;
    }
  `)
  const container = document.createElement('div');
  names.forEach(name => {
    const uri = encodeURI(name);
    const a = document.createElement('a');
    a.setAttribute('href', uri);
    a.textContent = name;
    container.appendChild(a);
  });
  document.body.appendChild(container);
}

/*
  The following gets generated by our browserify transform
  to fill in the desired penplot entries.
 */
{{entry}}

/*
  Runs the current entry or provides a directory listing if necessary.
 */
const names = Object.keys(entries);
if (names.length === 1) {
  const name = names[0];
  run(name, entries[name]);
} else {
  const path = decodeURI(location.pathname)
    .replace(/[\/]+$/, '')
    .replace(/^[\/]+/, '') || '/';
  if (path === '/') {
    list(names);
  } else {
    if (path in entries) {
      run(path, entries[path]);
    } else {
      console.error('no file', path)
      console.log(entries)
    }
  }
}
